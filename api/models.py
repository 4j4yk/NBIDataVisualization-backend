from __future__ import unicode_literals
from jsonfield import JSONField
from django.contrib.postgres.fields import JSONField
from django.db import models

from django.core.validators import *

from django.contrib.auth.models import User, Group

from django.contrib import admin
import base64

class Event(models.Model):
    year = models.PositiveSmallIntegerField(null=True)
    stateCode = models.CharField(max_length=3,blank=True)
    structureNumber = models.CharField(max_length=15,blank=True)
    inventoryRoute = JSONField(default={})
    highwayAgencyDistrict= models.CharField(max_length=2,blank=True)
    countyCode = models.IntegerField(blank=True, null=True)
    placeCode = models.IntegerField(blank=True, null=True)
    featuresIntersected = JSONField(default={})
    facilityCarriedByStructure = models.CharField(max_length=18,blank=True)
    location = models.CharField(max_length=25,blank=True)
    InventoryRTeMinVertClearance= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    kilometerpoint = models.IntegerField(blank=True, null=True)
    baseHighwayPoint = models.IntegerField(blank=True, null=True)
    inventoryRouteSubrouteNumber = JSONField(default={})
    latitude = models.IntegerField(blank=True, null=True)
    longitude = models.IntegerField(blank=True, null=True)
    bypassDetourLength = models.IntegerField(blank=True, null=True)
    toll = models.IntegerField(blank=True, null=True)
    maintenanceReponsibility = models.IntegerField(blank=True, null=True)
    owner = models.IntegerField(blank=True, null=True)
    functionalClassOfInventoryRte = models.IntegerField(blank=True, null=True)
    yearBuilt = models.PositiveSmallIntegerField(null=True)
    lanesOnUnderStructure = JSONField(default={})
    averageDailyTraffic = models.IntegerField(blank=True, null=True)
    yearOfAverageDailyTraffic = models.IntegerField(blank=True, null=True)
    designLoad = models.IntegerField(blank=True, null=True)
    approachRoadwayWidth = models.FloatField(blank=True, null=True)
    bridgeMedian = models.IntegerField(blank=True, null=True)
    skew = models.IntegerField(blank=True, null=True)
    structureFlared = models.IntegerField(blank=True, null=True)
    trafficSafetyFeatures = JSONField(default={})
    historicalSignificance = models.IntegerField(blank=True, null=True)
    navigationControl = models.CharField(max_length=2,blank=True)
    navigationVeriticalClearance = models.IntegerField(blank=True, null=True)
    navigationHorizontalClearance = models.IntegerField(blank=True, null=True)
    strucutreOpenPostedClosed = models.CharField(max_length=2,blank=True)
    typeOfService = JSONField(default={})
    structureTypeMain =JSONField(default={})
    structureTypeApproachSpans = JSONField(default={})
    numberOfSpansInMainUnit = models.IntegerField(blank=True, null=True)
    numberOfApproachSpans = models.IntegerField(blank=True, null=True)
    InventoryRteTotalHorzClearance= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    lengthOfMaximumSpan= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    structureLength= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    curbSidewalkWidth = JSONField(default={})
    bridgeRoadwayWithCurbToCurb= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    deckWidthOutToOut= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    minVertClearOverBridgeRoadway= models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    minimumVeriticalUnderclearance = JSONField(default={})
    minLateralUnderclearOnRight = JSONField(default={})
    minLateralUnderclearOnLeft = models.IntegerField(blank=True, null=True)
    deck = models.CharField(max_length=3,blank=True)
    superstructure = models.CharField(max_length=2,blank=True)
    substructure = models.CharField(max_length=2,blank=True)
    channelChannelProtection = models.CharField(max_length=2,blank=True)
    culverts = models.CharField(max_length=2,blank=True)
    methodUsedToDetermineOperatingRating = models.IntegerField(blank=True, null=True)
    operatingRating = models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    methodUsedToDetermineInventoryRating = models.IntegerField(blank=True, null=True)
    inventoryRating = models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    structuralEvaluation = models.CharField(max_length=2,blank=True)
    deckGeometry = models.CharField(max_length=2,blank=True)
    underclearVerticalHorizontal = models.CharField(max_length=2,blank=True)
    bridgePosting = models.IntegerField(blank=True, null=True)
    waterwayAdequacy = models.CharField(max_length=2,blank=True)
    approachRoadwayAlignment = models.CharField(max_length=2,blank=True)
    typeOfWork = JSONField(default={})
    lengthOfStructureImprovement = models.IntegerField(blank=True, null=True)
    inspectionDate = models.IntegerField(blank=True, null=True)
    designatedInspectionFrequency = models.IntegerField(blank=True, null=True)
    criticalFeatureInspection = JSONField(default={})
    criticalFeatureInspectionDates = JSONField(default={})
    bridgeImprovementCost = models.IntegerField(blank=True, null=True)
    roadwayImprovementCost = models.IntegerField(blank=True, null=True)
    totalProjectCost = models.IntegerField(blank=True, null=True)
    yearOfImprovementCost = models.FloatField(null=True)
    borderBridge = JSONField(default={})
    borderBridgeStructureNumber = models.CharField(max_length=15,blank=True)
    STRAHNETHighwayDesignation = models.IntegerField(blank=True, null=True)
    parallelStructureDesignation = models.CharField(max_length=2,blank=True)
    directionOfTraffic = models.IntegerField(blank=True, null=True)
    temporaryStructureDesignation = models.CharField(max_length=2,blank=True)
    highwaySystemOfInventoryRoute = models.IntegerField(blank=True, null=True)
    federalLandsHighways = models.IntegerField(blank=True, null=True)
    yearReconstructed = models.IntegerField(blank=True, null=True)
    deckStructureType = models.CharField(max_length=2,blank=True)
    wearingSurface = JSONField(default={})
    avgDailyTruckTraffic = models.IntegerField(blank=True, null=True)
    designatedNationalNetwork = models.IntegerField(blank=True, null=True)
    pier = models.FloatField(null=True)
    nbisBridgeLength = models.CharField(max_length=2,blank=True)
    scourCriticalBridges = models.CharField(max_length=2,blank=True)
    futureAvgDailyTraffic = models.IntegerField(blank=True, null=True)
    yearOfFutureAvgDailyTraffic = models.IntegerField(blank=True, null=True)
    minimumNavigationVerticalClearanceVerticalLiftBridge = models.FloatField(null=True)
    federalAgencyIndicator = models.CharField(max_length=2,blank=True)
    dateLastUpdate = models.CharField(max_length=10,blank=True)
    typeLastUpdate = models.CharField(max_length=2,blank=True)
    deductCode = models.CharField(max_length=2,blank=True)
    statuswith10yearrule = models.CharField(max_length=2,blank=True)
    sufficiencyRatingAsteriskField = models.CharField(max_length=2,blank=True)
    sufficiencyRating = models.DecimalField(max_digits=4,decimal_places=2, blank=True, null=True)
    loc = JSONField(default={})
    def __str__(self):
        """Return a human readable representation of the model instance."""
        return "{}".format(self.year)

class EventAdmin(admin.ModelAdmin):
        list_display = ('structureNumber', 'year')

class ApiKey(models.Model):
    owner = models.CharField(max_length=1000, blank=False)
    key = models.CharField(max_length=5000, blank=False)

    def __str__(self):
        return str(self.owner) + str(self.key)

class ApiKeyAdmin(admin.ModelAdmin):
    list_display = ('owner','key')
